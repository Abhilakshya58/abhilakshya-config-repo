// CONTROLLER

package com.sutherland.lms.controller;

import com.sutherland.lms.entity.LeaveRequest;
import com.sutherland.lms.service.LeaveRequestService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/leaves")
public class LeaveRequestController {

    @Autowired
    private LeaveRequestService leaveService;

    @PostMapping("/applyleaverequest")
    public ResponseEntity<LeaveRequest> applyLeave(@RequestBody LeaveRequest request,
                                                   @RequestParam String empId,
                                                   @RequestParam String managerId) {
        return ResponseEntity.ok(leaveService.applyLeave(request, empId, managerId));
    }

    @PutMapping("/verifyleaverequest/{id}")
    public ResponseEntity<LeaveRequest> verifyLeave(@PathVariable Long id,
                                                    @RequestParam boolean approved,
                                                    @RequestParam(required = false) String remarks) {
        return ResponseEntity.ok(leaveService.verifyLeave(id, approved, remarks));
    }

    @PutMapping("/cancelleave/{id}")
    public ResponseEntity<LeaveRequest> cancelLeave(@PathVariable Long id) {
        return ResponseEntity.ok(leaveService.cancelLeave(id));
    }

    @PutMapping("/withdrawleave/{id}")
    public ResponseEntity<LeaveRequest> withdrawLeave(@PathVariable Long id) {
        return ResponseEntity.ok(leaveService.withdrawLeave(id));
    }

    @GetMapping("/checkleaverequeststatus/{id}")
    public ResponseEntity<LeaveRequest> checkStatus(@PathVariable Long id) {
        return ResponseEntity.ok(leaveService.checkStatus(id));
    }

    @GetMapping("/viewleavehistory/{empId}")
    public ResponseEntity<List<LeaveRequest>> viewLeaveHistory(@PathVariable String empId) {
        return ResponseEntity.ok(leaveService.viewLeaveHistory(empId));
    }
}



//ENTITY
package com.sutherland.lms.entity;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.sutherland.lms.enums.LeaveStatus;
import com.sutherland.lms.enums.LeaveType;
import jakarta.persistence.*;
import java.time.LocalDate;

@Entity
@Table(name = "leave_requests")
public class LeaveRequest {

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "leave_seq")
    @SequenceGenerator(name = "leave_seq", sequenceName = "LEAVE_SEQ", allocationSize = 1)
    @com.fasterxml.jackson.annotation.JsonProperty(access = com.fasterxml.jackson.annotation.JsonProperty.Access.READ_ONLY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "emp_id", referencedColumnName = "emp_id", nullable = false)
    @JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
    private EmployeeEntity employee;

    @Column(name = "manager_id", nullable = false)
    private String managerId;

    private LocalDate fromDate;
    private LocalDate toDate;

    @Enumerated(EnumType.STRING)
    private LeaveType leaveType;

    private int numberOfDays;

    private LocalDate dateApplied;

    @Enumerated(EnumType.STRING)
    private LeaveStatus leaveStatus;

    private String remarks;

    public LeaveRequest() {}

    @PrePersist
    public void onCreate() {
        this.dateApplied = LocalDate.now();
        this.leaveStatus = LeaveStatus.APPLIED;
        if (fromDate != null && toDate != null) {
            this.numberOfDays = (int) (toDate.toEpochDay() - fromDate.toEpochDay() + 1);
        }
    }

    // Getters and Setters
    public Long getId() { return id; }

    public EmployeeEntity getEmployee() { return employee; }
    public void setEmployee(EmployeeEntity employee) { this.employee = employee; }

    public String getManagerId() { return managerId; }
    public void setManagerId(String managerId) { this.managerId = managerId; }

    public LocalDate getFromDate() { return fromDate; }
    public void setFromDate(LocalDate fromDate) { this.fromDate = fromDate; }

    public LocalDate getToDate() { return toDate; }
    public void setToDate(LocalDate toDate) { this.toDate = toDate; }

    public LeaveType getLeaveType() { return leaveType; }
    public void setLeaveType(LeaveType leaveType) { this.leaveType = leaveType; }

    public int getNumberOfDays() { return numberOfDays; }
    public void setNumberOfDays(int numberOfDays) { this.numberOfDays = numberOfDays; }

    public LocalDate getDateApplied() { return dateApplied; }
    public void setDateApplied(LocalDate dateApplied) { this.dateApplied = dateApplied; }

    public LeaveStatus getLeaveStatus() { return leaveStatus; }
    public void setLeaveStatus(LeaveStatus leaveStatus) { this.leaveStatus = leaveStatus; }

    public String getRemarks() { return remarks; }
    public void setRemarks(String remarks) { this.remarks = remarks; }
}



//REPO

package com.sutherland.lms.repo;

import com.sutherland.lms.entity.LeaveRequest;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.List;

public interface LeaveRequestRepository extends JpaRepository<LeaveRequest, Long> {
    List<LeaveRequest> findByEmployeeEmpId(String empId);
}


//SERVICE

package com.sutherland.lms.service;

import com.sutherland.lms.entity.LeaveRequest;
import java.util.List;

public interface LeaveRequestService {
    LeaveRequest applyLeave(LeaveRequest request, String empId, String managerId);
    LeaveRequest verifyLeave(Long requestId, boolean approved, String remarks);
    LeaveRequest cancelLeave(Long requestId);
    LeaveRequest withdrawLeave(Long requestId);
    LeaveRequest checkStatus(Long requestId);
    List<LeaveRequest> viewLeaveHistory(String empId);
}


//SERVICE IMPL

package com.sutherland.lms.service;

import com.sutherland.lms.entity.EmployeeEntity;
import com.sutherland.lms.entity.LeaveRequest;
import com.sutherland.lms.enums.LeaveStatus;
import com.sutherland.lms.repo.EmployeeRepository;
import com.sutherland.lms.repo.LeaveRequestRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class LeaveRequestServiceImpl implements LeaveRequestService {

    @Autowired
    private LeaveRequestRepository leaveRepo;

    @Autowired
    private EmployeeRepository empRepo;

    @Override
    public LeaveRequest applyLeave(LeaveRequest request, String empId, String managerId) {
        // validate employee
        EmployeeEntity emp = empRepo.findById(empId)
                .orElseThrow(() -> new RuntimeException("Employee not found"));

        // âœ… no need to fetch manager entity, just store managerId
        request.setEmployee(emp);
        request.setManagerId(managerId);

        return leaveRepo.save(request);
    }

    @Override
    public LeaveRequest verifyLeave(Long requestId, boolean approved, String remarks) {
        LeaveRequest req = leaveRepo.findById(requestId)
                .orElseThrow(() -> new RuntimeException("Leave request not found"));

        if (approved) {
            req.setLeaveStatus(LeaveStatus.APPROVED);
        } else {
            req.setLeaveStatus(LeaveStatus.REJECTED);
            req.setRemarks(remarks == null ? "Reason required" : remarks);
        }
        return leaveRepo.save(req);
    }

    @Override
    public LeaveRequest cancelLeave(Long requestId) {
        LeaveRequest req = leaveRepo.findById(requestId)
                .orElseThrow(() -> new RuntimeException("Leave request not found"));

        req.setLeaveStatus(LeaveStatus.CANCELLED);
        return leaveRepo.save(req);
    }

    @Override
    public LeaveRequest withdrawLeave(Long requestId) {
        LeaveRequest req = leaveRepo.findById(requestId)
                .orElseThrow(() -> new RuntimeException("Leave request not found"));

        req.setLeaveStatus(LeaveStatus.WITHDRAWN);
        return leaveRepo.save(req);
    }

    @Override
    public LeaveRequest checkStatus(Long requestId) {
        return leaveRepo.findById(requestId)
                .orElseThrow(() -> new RuntimeException("Leave request not found"));
    }

    @Override
    public List<LeaveRequest> viewLeaveHistory(String empId) {
        return leaveRepo.findByEmployeeEmpId(empId);
    }
}


//ENUMS

//
package com.sutherland.lms.enums;

public enum LeaveStatus {
	
    APPLIED, APPROVED, REJECTED, CANCELLED, WITHDRAWN


}


package com.sutherland.lms.enums;

public enum LeaveType {
	
    CASUAL, MEDICAL


}


